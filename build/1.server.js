require("source-map-support").install(),exports.ids=[1],exports.modules={59:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){var e="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;return function(t,n,r,o){var u=t&&t.defaultProps,i=arguments.length-3;if(n||0===i||(n={}),n&&u)for(var l in u)void 0===n[l]&&(n[l]=u[l]);else n||(n=u||{});if(1===i)n.children=o;else if(i>1){for(var a=Array(i),s=0;s<i;s++)a[s]=arguments[s+3];n.children=a}return{$$typeof:e,type:t,key:void 0===r?null:""+r,ref:null,props:n,_owner:null}}}(),u=n(7),i=(r(u),n(18)),l=r(i),a=n(13),s=o(l.default,{title:"Guessing Game"}),f=o("div",{},void 0,o("input",{placeholder:"Your Guess...",maxlength:"3",autofocus:!0}),o("button",{},void 0,"Submit")),c=function(){return o("div",{},void 0,s,o("h1",{className:(0,a.css)(d.header)},void 0,"Guessing Game"),o("p",{className:(0,a.css)(d.lead)},void 0,"This is the guessing game project for FullStack Academy Foundations"),f)},d=a.StyleSheet.create({header:{fontSize:28,lineHeight:"1.2",margin:"0 0 1rem"},lead:{fontSize:18,lineHeight:"1.5",margin:"0 0 1rem",color:"#555"},body:{fontSize:"1rem",lineHeight:"1.5",margin:"0 0 1rem",color:"#555"}});t.default=c},100:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=function(){var e="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;return function(t,n,r,o){var u=t&&t.defaultProps,i=arguments.length-3;if(n||0===i||(n={}),n&&u)for(var l in u)void 0===n[l]&&(n[l]=u[l]);else n||(n=u||{});if(1===i)n.children=o;else if(i>1){for(var a=Array(i),s=0;s<i;s++)a[s]=arguments[s+3];n.children=a}return{$$typeof:e,type:t,key:void 0===r?null:""+r,ref:null,props:n,_owner:null}}}(),u=n(7),i=(r(u),n(18)),l=(r(i),n(13)),a=function(){return o("div",{},void 0,o("h2",{className:(0,l.css)(s.header)},void 0,"Guessing Game"),o("p",{className:(0,l.css)(s.lead)},void 0,"This is the guessing game project for FullStack Academy Foundations"))},s=l.StyleSheet.create({header:{fontSize:28,lineHeight:"1.2",margin:"0 0 1rem"},lead:{fontSize:18,lineHeight:"1.5",margin:"0 0 1rem",color:"#555"},body:{fontSize:"1rem",lineHeight:"1.5",margin:"0 0 1rem",color:"#555"}});t.default=a},101:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(100),u=r(o);t.default=u.default},105:function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(59),u=r(o);t.default={path:"*",component:u.default}},107:function(e,t,n){"use strict";function r(e){return{path:"post/:slug",getComponents:function(t,r){n.e(3,function(t){var u=n(61).default,i=n(33).default;(0,o.injectAsyncReducer)(e,"currentPost",i),r(null,u)})}}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r;var o=n(35)},110:function(e,t,n){"use strict";function r(e){return{path:"posts",getComponents:function(t,r){n.e(2,function(t){var u=n(62).default,i=n(34).default;(0,o.injectAsyncReducer)(e,"posts",i),r(null,u)})}}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r;var o=n(35)}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,