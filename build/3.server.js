require("source-map-support").install(),exports.ids=[3],exports.modules={19:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LOAD_POSTS_REQUEST="LOAD_POSTS_REQUEST",t.LOAD_POSTS_SUCCESS="LOAD_POSTS_SUCCESS",t.LOAD_POSTS_FAILURE="LOAD_POSTS_FAILURE",t.LOAD_POST_REQUEST="LOAD_POST_REQUEST",t.LOAD_POST_SUCCESS="LOAD_POST_SUCCESS",t.LOAD_POST_FAILURE="LOAD_POST_FAILURE"},33:function(e,t,r){"use strict";function o(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:u,t=arguments[1];switch(t.type){case l.LOAD_POST_REQUEST:return a({},e,{isLoading:!0,error:null});case l.LOAD_POST_SUCCESS:return a({},e,{title:t.payload.title,content:t.payload.content,lastFetched:t.meta.lastFetched,isLoading:!1});case l.LOAD_POST_FAILURE:return a({},e,{error:t.payload});default:return e}}Object.defineProperty(t,"__esModule",{value:!0}),t.selectCurrentPost=void 0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e};t.default=n;var i=r(19),l=o(i),u={lastFetched:null,isLoading:!1,error:null,title:"",content:""};t.selectCurrentPost=function(e){return e.currentPost}},61:function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){var e="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;return function(t,r,o,n){var a=t&&t.defaultProps,i=arguments.length-3;if(r||0===i||(r={}),r&&a)for(var l in a)void 0===r[l]&&(r[l]=a[l]);else r||(r=a||{});if(1===i)r.children=n;else if(i>1){for(var u=Array(i),c=0;c<i;c++)u[c]=arguments[c+3];r.children=u}return{$$typeof:e,type:t,key:void 0===o?null:""+o,ref:null,props:r,_owner:null}}}(),a=r(58),i=r(7),l=(o(i),r(57)),u=r(106),c=r(13),s=r(18),S=o(s),d=r(59),_=o(d),f=r(33),O={fetch:function(e){var t=e.dispatch,r=e.params.slug;return t((0,u.loadPost)(r))}},p=function(e){return(0,f.selectCurrentPost)(e)},v=n(_.default,{}),P=function(e){var t=e.title,r=e.content,o=e.isLoading,a=e.error;return a?v:n("div",{},void 0,n(S.default,{title:t}),o&&n("div",{},void 0,n("h2",{className:(0,c.css)(L.loading)},void 0,"Loading....")),!o&&n("div",{},void 0,n("h2",{className:(0,c.css)(L.title)},void 0,t),n("p",{className:(0,c.css)(L.content)},void 0,r)))},L=c.StyleSheet.create({content:{fontSize:"1rem",lineHeight:"1.5",margin:"1rem 0",color:"#555"},title:{fontSize:28,margin:"0 auto 1.5rem",color:"#000"},loading:{fontSize:28,margin:"0 auto 1.5rem",color:"#b7b7b7"}});t.default=(0,a.provideHooks)(O)((0,l.connect)(p)(P))},106:function(e,t,r){"use strict";function o(e){return function(t,r,o){var a=o.axios,i=r().sourceRequest,l=i.protocol,u=i.host;return t({type:n.LOAD_POST_REQUEST}),a.get(l+"://"+u+"/api/v0/posts/"+e).then(function(e){t({type:n.LOAD_POST_SUCCESS,payload:e.data,meta:{lastFetched:Date.now()}})}).catch(function(e){console.error("Error in reducer that handles "+n.LOAD_POST_SUCCESS+": ",e),t({type:n.LOAD_POST_FAILURE,payload:e,error:!0})})}}Object.defineProperty(t,"__esModule",{value:!0}),t.loadPost=o;var n=r(19)}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vMy5zZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vY29tbW9uL2NvbnN0YW50cy5qcz9lMTRiIiwid2VicGFjazovLy8uL2NvbW1vbi9yb3V0ZXMvUG9zdC9yZWR1Y2VyLmpzIiwid2VicGFjazovLy8uL2NvbW1vbi9yb3V0ZXMvUG9zdC9jb250YWluZXJzL1Bvc3RQYWdlLmpzIiwid2VicGFjazovLy8uL2NvbW1vbi9yb3V0ZXMvUG9zdC9hY3Rpb25zLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJpbnN0YWxsIiwiZXhwb3J0cyIsImlkcyIsIm1vZHVsZXMiLCIxOSIsIm1vZHVsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJMT0FEX1BPU1RTX1JFUVVFU1QiLCJMT0FEX1BPU1RTX1NVQ0NFU1MiLCJMT0FEX1BPU1RTX0ZBSUxVUkUiLCJMT0FEX1BPU1RfUkVRVUVTVCIsIkxPQURfUE9TVF9TVUNDRVNTIiwiTE9BRF9QT1NUX0ZBSUxVUkUiLCIzMyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJuZXdPYmoiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZWZhdWx0IiwiY3VycmVudFBvc3QiLCJzdGF0ZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsImluaXRpYWxTdGF0ZSIsImFjdGlvbiIsInR5cGUiLCJ0eXBlcyIsIl9leHRlbmRzIiwiaXNMb2FkaW5nIiwiZXJyb3IiLCJ0aXRsZSIsInBheWxvYWQiLCJjb250ZW50IiwibGFzdEZldGNoZWQiLCJtZXRhIiwic2VsZWN0Q3VycmVudFBvc3QiLCJhc3NpZ24iLCJ0YXJnZXQiLCJpIiwic291cmNlIiwiX2NvbnN0YW50cyIsIjYxIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9qc3giLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJTeW1ib2wiLCJmb3IiLCJwcm9wcyIsImNoaWxkcmVuIiwiZGVmYXVsdFByb3BzIiwiY2hpbGRyZW5MZW5ndGgiLCJwcm9wTmFtZSIsImNoaWxkQXJyYXkiLCJBcnJheSIsIiQkdHlwZW9mIiwicmVmIiwiX293bmVyIiwiX3JlZGlhbCIsIl9yZWFjdCIsIl9yZWFjdFJlZHV4IiwiX2FjdGlvbnMiLCJfYXBocm9kaXRlIiwiX3JlYWN0SGVsbWV0IiwiX3JlYWN0SGVsbWV0MiIsIl9Ob3RGb3VuZCIsIl9Ob3RGb3VuZDIiLCJfcmVkdWNlciIsInJlZGlhbCIsImZldGNoIiwiX3JlZiIsImRpc3BhdGNoIiwic2x1ZyIsInBhcmFtcyIsImxvYWRQb3N0IiwibWFwU3RhdGVUb1Byb3BzIiwiX3JlZjMiLCJQb3N0UGFnZSIsIl9yZWYyIiwiY2xhc3NOYW1lIiwiY3NzIiwic3R5bGVzIiwibG9hZGluZyIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJmb250U2l6ZSIsImxpbmVIZWlnaHQiLCJtYXJnaW4iLCJjb2xvciIsInByb3ZpZGVIb29rcyIsImNvbm5lY3QiLCIxMDYiLCJnZXRTdGF0ZSIsImF4aW9zIiwiX2dldFN0YXRlJHNvdXJjZVJlcXVlIiwic291cmNlUmVxdWVzdCIsInByb3RvY29sIiwiaG9zdCIsImdldCIsInRoZW4iLCJyZXMiLCJkYXRhIiwiRGF0ZSIsIm5vdyIsImNhdGNoIiwiY29uc29sZSJdLCJtYXBwaW5ncyI6IkFBQUFBLFFBQVEsc0JBQXNCQyxVQUM5QkMsUUFBUUMsS0FBTyxHQUNmRCxRQUFRRSxTQUVGQyxHQUNBLFNBQVVDLEVBQVFKLEdBRXZCLFlBRUFLLFFBQU9DLGVBQWVOLEVBQVMsY0FDN0JPLFdDVFVDLHFCQUFxQixxQkFDckJDLHFCQUFxQixxQkFDckJDLHFCQUFxQixxQkFHckJDLG9CQUFvQixvQkFDcEJDLG9CQUFvQixvQkFDcEJDLG9CQUFvQixxQkRnQjNCQyxHQUNBLFNBQVVWLEVBQVFKLEVBQVNlLEdBRWhDLFlBZUEsU0FBU0MsR0FBd0JDLEdBQU8sR0FBSUEsR0FBT0EsRUFBSUMs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U0FBU2lFLEdBQVVGLEdBQ3hCLE1BQU8sVUFBQ0QsRUFBVXFCLEVBQVh0QixHQUFtQyxHQUFadUIsR0FBWXZCLEVBQVp1QixNQUFZQyxFQUNiRixJQUFXRyxjQUE5QkMsRUFEZ0NGLEVBQ2hDRSxTQUFVQyxFQURzQkgsRUFDdEJHLElBRWxCLE9BREExQixJQUFXN0MsMkJBQ0ptRSxFQUFNSyxJQUFPRixFQUFiLE1BQTJCQyxFQUEzQixpQkFBZ0R6QixHQUNwRDJCLEtBQUssU0FBQUMsR0FDSjdCLEdBQ0U3Qyx5QkFDQU0sUUFBU29FLEVBQUlDLEtBQ2JsRSxNQUNFRCxZQUFhb0UsS0FBS0MsV0FJdkJDLE1BQU0sU0FBQTFFLEdBQ0wyRSxRQUFRM0UsTUFBUixpQ0FBQVcsRUFBQW5DLGtCQUFBLEtBQXNFd0IsR0FDdEV5QyxHQUNFN0MseUJBQ0FNLFFBQVNGLEVBQ1RBLGNKZ0tUL0IsT0FBT0MsZUFBZU4sRUFBUyxjQUM3Qk8sV0FFRlAsRUl0TGVnRixVQUZoQixJQUFBakMsR0FBQWhDLEVBQUEiLCJmaWxlIjoiMy5zZXJ2ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKFwic291cmNlLW1hcC1zdXBwb3J0XCIpLmluc3RhbGwoKTtcbmV4cG9ydHMuaWRzID0gWzNdO1xuZXhwb3J0cy5tb2R1bGVzID0ge1xuXG4vKioqLyAxOTpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0Ly8gUG9zdHNcblx0dmFyIExPQURfUE9TVFNfUkVRVUVTVCA9IGV4cG9ydHMuTE9BRF9QT1NUU19SRVFVRVNUID0gJ0xPQURfUE9TVFNfUkVRVUVTVCc7XG5cdHZhciBMT0FEX1BPU1RTX1NVQ0NFU1MgPSBleHBvcnRzLkxPQURfUE9TVFNfU1VDQ0VTUyA9ICdMT0FEX1BPU1RTX1NVQ0NFU1MnO1xuXHR2YXIgTE9BRF9QT1NUU19GQUlMVVJFID0gZXhwb3J0cy5MT0FEX1BPU1RTX0ZBSUxVUkUgPSAnTE9BRF9QT1NUU19GQUlMVVJFJztcblx0XG5cdC8vIFNpbmdsZSBQb3N0XG5cdHZhciBMT0FEX1BPU1RfUkVRVUVTVCA9IGV4cG9ydHMuTE9BRF9QT1NUX1JFUVVFU1QgPSAnTE9BRF9QT1NUX1JFUVVFU1QnO1xuXHR2YXIgTE9BRF9QT1NUX1NVQ0NFU1MgPSBleHBvcnRzLkxPQURfUE9TVF9TVUNDRVNTID0gJ0xPQURfUE9TVF9TVUNDRVNTJztcblx0dmFyIExPQURfUE9TVF9GQUlMVVJFID0gZXhwb3J0cy5MT0FEX1BPU1RfRkFJTFVSRSA9ICdMT0FEX1BPU1RfRkFJTFVSRSc7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAzMzpcbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5zZWxlY3RDdXJyZW50UG9zdCA9IHVuZGVmaW5lZDtcblx0XG5cdHZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBjdXJyZW50UG9zdDtcblx0XG5cdHZhciBfY29uc3RhbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cdFxuXHR2YXIgdHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChfY29uc3RhbnRzKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gZWxzZSB7IHZhciBuZXdPYmogPSB7fTsgaWYgKG9iaiAhPSBudWxsKSB7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgcmV0dXJuIG5ld09iajsgfSB9XG5cdFxuXHR2YXIgaW5pdGlhbFN0YXRlID0ge1xuXHQgIGxhc3RGZXRjaGVkOiBudWxsLFxuXHQgIGlzTG9hZGluZzogZmFsc2UsXG5cdCAgZXJyb3I6IG51bGwsXG5cdCAgdGl0bGU6ICcnLFxuXHQgIGNvbnRlbnQ6ICcnXG5cdH07XG5cdFxuXHRmdW5jdGlvbiBjdXJyZW50UG9zdCgpIHtcblx0ICB2YXIgc3RhdGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGluaXRpYWxTdGF0ZTtcblx0ICB2YXIgYWN0aW9uID0gYXJndW1lbnRzWzFdO1xuXHRcblx0ICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG5cdCAgICBjYXNlIHR5cGVzLkxPQURfUE9TVF9SRVFVRVNUOlxuXHQgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHN0YXRlLCB7XG5cdCAgICAgICAgaXNMb2FkaW5nOiB0cnVlLFxuXHQgICAgICAgIGVycm9yOiBudWxsIH0pO1xuXHQgICAgY2FzZSB0eXBlcy5MT0FEX1BPU1RfU1VDQ0VTUzpcblx0ICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuXHQgICAgICAgIHRpdGxlOiBhY3Rpb24ucGF5bG9hZC50aXRsZSxcblx0ICAgICAgICBjb250ZW50OiBhY3Rpb24ucGF5bG9hZC5jb250ZW50LFxuXHQgICAgICAgIGxhc3RGZXRjaGVkOiBhY3Rpb24ubWV0YS5sYXN0RmV0Y2hlZCxcblx0ICAgICAgICBpc0xvYWRpbmc6IGZhbHNlIH0pO1xuXHQgICAgY2FzZSB0eXBlcy5MT0FEX1BPU1RfRkFJTFVSRTpcblx0ICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuXHQgICAgICAgIGVycm9yOiBhY3Rpb24ucGF5bG9hZCB9KTtcblx0ICAgIGRlZmF1bHQ6XG5cdCAgICAgIHJldHVybiBzdGF0ZTtcblx0ICB9XG5cdH1cblx0XG5cdC8vIEV4YW1wbGUgb2YgYSBjby1sb2NhdGVkIHNlbGVjdG9yXG5cdHZhciBzZWxlY3RDdXJyZW50UG9zdCA9IGV4cG9ydHMuc2VsZWN0Q3VycmVudFBvc3QgPSBmdW5jdGlvbiBzZWxlY3RDdXJyZW50UG9zdChzdGF0ZSkge1xuXHQgIHJldHVybiBzdGF0ZS5jdXJyZW50UG9zdDtcblx0fTtcblxuLyoqKi8gfSksXG5cbi8qKiovIDYxOlxuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9qc3ggPSBmdW5jdGlvbiAoKSB7IHZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLmZvciAmJiBTeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSB8fCAweGVhYzc7IHJldHVybiBmdW5jdGlvbiBjcmVhdGVSYXdSZWFjdEVsZW1lbnQodHlwZSwgcHJvcHMsIGtleSwgY2hpbGRyZW4pIHsgdmFyIGRlZmF1bHRQcm9wcyA9IHR5cGUgJiYgdHlwZS5kZWZhdWx0UHJvcHM7IHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAzOyBpZiAoIXByb3BzICYmIGNoaWxkcmVuTGVuZ3RoICE9PSAwKSB7IHByb3BzID0ge307IH0gaWYgKHByb3BzICYmIGRlZmF1bHRQcm9wcykgeyBmb3IgKHZhciBwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHsgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gdm9pZCAwKSB7IHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07IH0gfSB9IGVsc2UgaWYgKCFwcm9wcykgeyBwcm9wcyA9IGRlZmF1bHRQcm9wcyB8fCB7fTsgfSBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHsgcHJvcHMuY2hpbGRyZW4gPSBjaGlsZHJlbjsgfSBlbHNlIGlmIChjaGlsZHJlbkxlbmd0aCA+IDEpIHsgdmFyIGNoaWxkQXJyYXkgPSBBcnJheShjaGlsZHJlbkxlbmd0aCk7IGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykgeyBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAzXTsgfSBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkQXJyYXk7IH0gcmV0dXJuIHsgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSwgdHlwZTogdHlwZSwga2V5OiBrZXkgPT09IHVuZGVmaW5lZCA/IG51bGwgOiAnJyArIGtleSwgcmVmOiBudWxsLCBwcm9wczogcHJvcHMsIF9vd25lcjogbnVsbCB9OyB9OyB9KCk7XG5cdFxuXHR2YXIgX3JlZGlhbCA9IF9fd2VicGFja19yZXF1aXJlX18oNTgpO1xuXHRcblx0dmFyIF9yZWFjdCA9IF9fd2VicGFja19yZXF1aXJlX18oNyk7XG5cdFxuXHR2YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblx0XG5cdHZhciBfcmVhY3RSZWR1eCA9IF9fd2VicGFja19yZXF1aXJlX18oNTcpO1xuXHRcblx0dmFyIF9hY3Rpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMDYpO1xuXHRcblx0dmFyIF9hcGhyb2RpdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEzKTtcblx0XG5cdHZhciBfcmVhY3RIZWxtZXQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE4KTtcblx0XG5cdHZhciBfcmVhY3RIZWxtZXQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3RIZWxtZXQpO1xuXHRcblx0dmFyIF9Ob3RGb3VuZCA9IF9fd2VicGFja19yZXF1aXJlX18oNTkpO1xuXHRcblx0dmFyIF9Ob3RGb3VuZDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Ob3RGb3VuZCk7XG5cdFxuXHR2YXIgX3JlZHVjZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMzKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgcmVkaWFsID0ge1xuXHQgIGZldGNoOiBmdW5jdGlvbiBmZXRjaChfcmVmKSB7XG5cdCAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmLmRpc3BhdGNoLFxuXHQgICAgICAgIHNsdWcgPSBfcmVmLnBhcmFtcy5zbHVnO1xuXHQgICAgcmV0dXJuIGRpc3BhdGNoKCgwLCBfYWN0aW9ucy5sb2FkUG9zdCkoc2x1ZykpO1xuXHQgIH1cblx0fTtcblx0XG5cdHZhciBtYXBTdGF0ZVRvUHJvcHMgPSBmdW5jdGlvbiBtYXBTdGF0ZVRvUHJvcHMoc3RhdGUpIHtcblx0ICByZXR1cm4gKDAsIF9yZWR1Y2VyLnNlbGVjdEN1cnJlbnRQb3N0KShzdGF0ZSk7XG5cdH07XG5cdFxuXHR2YXIgX3JlZjMgPSBfanN4KF9Ob3RGb3VuZDIuZGVmYXVsdCwge30pO1xuXHRcblx0dmFyIFBvc3RQYWdlID0gZnVuY3Rpb24gUG9zdFBhZ2UoX3JlZjIpIHtcblx0ICB2YXIgdGl0bGUgPSBfcmVmMi50aXRsZSxcblx0ICAgICAgY29udGVudCA9IF9yZWYyLmNvbnRlbnQsXG5cdCAgICAgIGlzTG9hZGluZyA9IF9yZWYyLmlzTG9hZGluZyxcblx0ICAgICAgZXJyb3IgPSBfcmVmMi5lcnJvcjtcblx0XG5cdCAgaWYgKCFlcnJvcikge1xuXHQgICAgcmV0dXJuIF9qc3goJ2RpdicsIHt9LCB2b2lkIDAsIF9qc3goX3JlYWN0SGVsbWV0Mi5kZWZhdWx0LCB7XG5cdCAgICAgIHRpdGxlOiB0aXRsZVxuXHQgICAgfSksIGlzTG9hZGluZyAmJiBfanN4KCdkaXYnLCB7fSwgdm9pZCAwLCBfanN4KCdoMicsIHtcblx0ICAgICAgY2xhc3NOYW1lOiAoMCwgX2FwaHJvZGl0ZS5jc3MpKHN0eWxlcy5sb2FkaW5nKVxuXHQgICAgfSwgdm9pZCAwLCAnTG9hZGluZy4uLi4nKSksICFpc0xvYWRpbmcgJiYgX2pzeCgnZGl2Jywge30sIHZvaWQgMCwgX2pzeCgnaDInLCB7XG5cdCAgICAgIGNsYXNzTmFtZTogKDAsIF9hcGhyb2RpdGUuY3NzKShzdHlsZXMudGl0bGUpXG5cdCAgICB9LCB2b2lkIDAsIHRpdGxlKSwgX2pzeCgncCcsIHtcblx0ICAgICAgY2xhc3NOYW1lOiAoMCwgX2FwaHJvZGl0ZS5jc3MpKHN0eWxlcy5jb250ZW50KVxuXHQgICAgfSwgdm9pZCAwLCBjb250ZW50KSkpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICAvLyBtYXliZSBjaGVjayBmb3IgZGlmZmVyZW50IHR5cGVzIG9mIGVycm9ycyBhbmQgZGlzcGxheSBhcHByb3ByaWF0ZWx5XG5cdCAgICByZXR1cm4gX3JlZjM7XG5cdCAgfVxuXHR9O1xuXHRcblx0dmFyIHN0eWxlcyA9IF9hcGhyb2RpdGUuU3R5bGVTaGVldC5jcmVhdGUoe1xuXHQgIGNvbnRlbnQ6IHtcblx0ICAgIGZvbnRTaXplOiAnMXJlbScsXG5cdCAgICBsaW5lSGVpZ2h0OiAnMS41Jyxcblx0ICAgIG1hcmdpbjogJzFyZW0gMCcsXG5cdCAgICBjb2xvcjogJyM1NTUnXG5cdCAgfSxcblx0ICB0aXRsZToge1xuXHQgICAgZm9udFNpemU6IDI4LFxuXHQgICAgbWFyZ2luOiAnMCBhdXRvIDEuNXJlbScsXG5cdCAgICBjb2xvcjogJyMwMDAnXG5cdCAgfSxcblx0ICBsb2FkaW5nOiB7XG5cdCAgICBmb250U2l6ZTogMjgsXG5cdCAgICBtYXJnaW46ICcwIGF1dG8gMS41cmVtJyxcblx0ICAgIGNvbG9yOiAnI2I3YjdiNydcblx0ICB9XG5cdH0pO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gKDAsIF9yZWRpYWwucHJvdmlkZUhvb2tzKShyZWRpYWwpKCgwLCBfcmVhY3RSZWR1eC5jb25uZWN0KShtYXBTdGF0ZVRvUHJvcHMpKFBvc3RQYWdlKSk7XG5cbi8qKiovIH0pLFxuXG4vKioqLyAxMDY6XG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMubG9hZFBvc3QgPSBsb2FkUG9zdDtcblx0XG5cdHZhciBfY29uc3RhbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxOSk7XG5cdFxuXHRmdW5jdGlvbiBsb2FkUG9zdChzbHVnKSB7XG5cdCAgcmV0dXJuIGZ1bmN0aW9uIChkaXNwYXRjaCwgZ2V0U3RhdGUsIF9yZWYpIHtcblx0ICAgIHZhciBheGlvcyA9IF9yZWYuYXhpb3M7XG5cdCAgICB2YXIgX2dldFN0YXRlJHNvdXJjZVJlcXVlID0gZ2V0U3RhdGUoKS5zb3VyY2VSZXF1ZXN0LFxuXHQgICAgICAgIHByb3RvY29sID0gX2dldFN0YXRlJHNvdXJjZVJlcXVlLnByb3RvY29sLFxuXHQgICAgICAgIGhvc3QgPSBfZ2V0U3RhdGUkc291cmNlUmVxdWUuaG9zdDtcblx0XG5cdCAgICBkaXNwYXRjaCh7IHR5cGU6IF9jb25zdGFudHMuTE9BRF9QT1NUX1JFUVVFU1QgfSk7XG5cdCAgICByZXR1cm4gYXhpb3MuZ2V0KHByb3RvY29sICsgJzovLycgKyBob3N0ICsgJy9hcGkvdjAvcG9zdHMvJyArIHNsdWcpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuXHQgICAgICBkaXNwYXRjaCh7XG5cdCAgICAgICAgdHlwZTogX2NvbnN0YW50cy5MT0FEX1BPU1RfU1VDQ0VTUyxcblx0ICAgICAgICBwYXlsb2FkOiByZXMuZGF0YSxcblx0ICAgICAgICBtZXRhOiB7XG5cdCAgICAgICAgICBsYXN0RmV0Y2hlZDogRGF0ZS5ub3coKVxuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdCAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcblx0ICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gcmVkdWNlciB0aGF0IGhhbmRsZXMgJyArIF9jb25zdGFudHMuTE9BRF9QT1NUX1NVQ0NFU1MgKyAnOiAnLCBlcnJvcik7XG5cdCAgICAgIGRpc3BhdGNoKHtcblx0ICAgICAgICB0eXBlOiBfY29uc3RhbnRzLkxPQURfUE9TVF9GQUlMVVJFLFxuXHQgICAgICAgIHBheWxvYWQ6IGVycm9yLFxuXHQgICAgICAgIGVycm9yOiB0cnVlXG5cdCAgICAgIH0pO1xuXHQgICAgfSk7XG5cdCAgfTtcblx0fVxuXG4vKioqLyB9KVxuXG59OztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gMy5zZXJ2ZXIuanMiLCIvLyBQb3N0c1xuZXhwb3J0IGNvbnN0IExPQURfUE9TVFNfUkVRVUVTVCA9ICdMT0FEX1BPU1RTX1JFUVVFU1QnXG5leHBvcnQgY29uc3QgTE9BRF9QT1NUU19TVUNDRVNTID0gJ0xPQURfUE9TVFNfU1VDQ0VTUydcbmV4cG9ydCBjb25zdCBMT0FEX1BPU1RTX0ZBSUxVUkUgPSAnTE9BRF9QT1NUU19GQUlMVVJFJ1xuXG4vLyBTaW5nbGUgUG9zdFxuZXhwb3J0IGNvbnN0IExPQURfUE9TVF9SRVFVRVNUID0gJ0xPQURfUE9TVF9SRVFVRVNUJ1xuZXhwb3J0IGNvbnN0IExPQURfUE9TVF9TVUNDRVNTID0gJ0xPQURfUE9TVF9TVUNDRVNTJ1xuZXhwb3J0IGNvbnN0IExPQURfUE9TVF9GQUlMVVJFID0gJ0xPQURfUE9TVF9GQUlMVVJFJ1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29tbW9uL2NvbnN0YW50cy5qcyIsImltcG9ydCAqIGFzIHR5cGVzIGZyb20gJy4uLy4uL2NvbnN0YW50cydcblxuY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICBsYXN0RmV0Y2hlZDogbnVsbCxcbiAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgZXJyb3I6IG51bGwsXG4gIHRpdGxlOiAnJyxcbiAgY29udGVudDogJydcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3VycmVudFBvc3QgKHN0YXRlID0gaW5pdGlhbFN0YXRlLCBhY3Rpb24pIHtcbiAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgIGNhc2UgdHlwZXMuTE9BRF9QT1NUX1JFUVVFU1Q6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSxcbiAgICAgICAgaXNMb2FkaW5nOiB0cnVlLFxuICAgICAgICBlcnJvcjogbnVsbH1cbiAgICBjYXNlIHR5cGVzLkxPQURfUE9TVF9TVUNDRVNTOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsXG4gICAgICAgIHRpdGxlOiBhY3Rpb24ucGF5bG9hZC50aXRsZSxcbiAgICAgICAgY29udGVudDogYWN0aW9uLnBheWxvYWQuY29udGVudCxcbiAgICAgICAgbGFzdEZldGNoZWQ6IGFjdGlvbi5tZXRhLmxhc3RGZXRjaGVkLFxuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlfVxuICAgIGNhc2UgdHlwZXMuTE9BRF9QT1NUX0ZBSUxVUkU6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSxcbiAgICAgICAgZXJyb3I6IGFjdGlvbi5wYXlsb2FkIH1cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHN0YXRlXG4gIH1cbn1cblxuLy8gRXhhbXBsZSBvZiBhIGNvLWxvY2F0ZWQgc2VsZWN0b3JcbmV4cG9ydCBjb25zdCBzZWxlY3RDdXJyZW50UG9zdCA9IHN0YXRlID0+IHN0YXRlLmN1cnJlbnRQb3N0XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9jb21tb24vcm91dGVzL1Bvc3QvcmVkdWNlci5qcyIsImltcG9ydCB7IHByb3ZpZGVIb29rcyB9IGZyb20gJ3JlZGlhbCdcbmltcG9ydCBSZWFjdCwgeyBQcm9wVHlwZXMgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCB7IGxvYWRQb3N0IH0gZnJvbSAnLi4vYWN0aW9ucydcbmltcG9ydCB7IFN0eWxlU2hlZXQsIGNzcyB9IGZyb20gJ2FwaHJvZGl0ZSdcbmltcG9ydCBIZWxtZXQgZnJvbSAncmVhY3QtaGVsbWV0J1xuaW1wb3J0IE5vdEZvdW5kIGZyb20gJy4uLy4uLy4uL2NvbXBvbmVudHMvTm90Rm91bmQnXG5pbXBvcnQgeyBzZWxlY3RDdXJyZW50UG9zdCB9IGZyb20gJy4uL3JlZHVjZXInXG5cbmNvbnN0IHJlZGlhbCA9IHtcbiAgZmV0Y2g6ICh7IGRpc3BhdGNoLCBwYXJhbXM6IHsgc2x1ZyB9IH0pID0+IGRpc3BhdGNoKGxvYWRQb3N0KHNsdWcpKVxufVxuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSBzdGF0ZSA9PiBzZWxlY3RDdXJyZW50UG9zdChzdGF0ZSlcblxuY29uc3QgUG9zdFBhZ2UgPSAoeyB0aXRsZSwgY29udGVudCwgaXNMb2FkaW5nLCBlcnJvciB9KSA9PiB7XG4gIGlmICghZXJyb3IpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPEhlbG1ldCB0aXRsZT17dGl0bGV9IC8+XG4gICAgICAgIHtpc0xvYWRpbmcgJiZcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy5sb2FkaW5nKX0+TG9hZGluZy4uLi48L2gyPlxuICAgICAgICAgIDwvZGl2Pn1cbiAgICAgICAgeyFpc0xvYWRpbmcgJiZcbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGgyIGNsYXNzTmFtZT17Y3NzKHN0eWxlcy50aXRsZSl9Pnt0aXRsZX08L2gyPlxuICAgICAgICAgICAgPHAgY2xhc3NOYW1lPXtjc3Moc3R5bGVzLmNvbnRlbnQpfT57Y29udGVudH08L3A+XG4gICAgICAgICAgPC9kaXY+fVxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9IGVsc2Uge1xuICAgIC8vIG1heWJlIGNoZWNrIGZvciBkaWZmZXJlbnQgdHlwZXMgb2YgZXJyb3JzIGFuZCBkaXNwbGF5IGFwcHJvcHJpYXRlbHlcbiAgICByZXR1cm4gPE5vdEZvdW5kIC8+XG4gIH1cbn1cblxuUG9zdFBhZ2UucHJvcFR5cGVzID0ge1xuICB0aXRsZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29udGVudDogUHJvcFR5cGVzLnN0cmluZyxcbiAgaXNMb2FkaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgZXJyb3I6IFByb3BUeXBlcy5vYmplY3Rcbn1cblxuY29uc3Qgc3R5bGVzID0gU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250ZW50OiB7XG4gICAgZm9udFNpemU6ICcxcmVtJyxcbiAgICBsaW5lSGVpZ2h0OiAnMS41JyxcbiAgICBtYXJnaW46ICcxcmVtIDAnLFxuICAgIGNvbG9yOiAnIzU1NSdcbiAgfSxcbiAgdGl0bGU6IHtcbiAgICBmb250U2l6ZTogMjgsXG4gICAgbWFyZ2luOiAnMCBhdXRvIDEuNXJlbScsXG4gICAgY29sb3I6ICcjMDAwJ1xuICB9LFxuICBsb2FkaW5nOiB7XG4gICAgZm9udFNpemU6IDI4LFxuICAgIG1hcmdpbjogJzAgYXV0byAxLjVyZW0nLFxuICAgIGNvbG9yOiAnI2I3YjdiNydcbiAgfVxufSlcblxuZXhwb3J0IGRlZmF1bHQgcHJvdmlkZUhvb2tzKHJlZGlhbCkoY29ubmVjdChtYXBTdGF0ZVRvUHJvcHMpKFBvc3RQYWdlKSlcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2NvbW1vbi9yb3V0ZXMvUG9zdC9jb250YWluZXJzL1Bvc3RQYWdlLmpzIiwiaW1wb3J0IHsgTE9BRF9QT1NUX1JFUVVFU1QsIExPQURfUE9TVF9TVUNDRVNTLCBMT0FEX1BPU1RfRkFJTFVSRSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cydcblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRQb3N0IChzbHVnKSB7XG4gIHJldHVybiAoZGlzcGF0Y2gsIGdldFN0YXRlLCB7IGF4aW9zIH0pID0+IHtcbiAgICBjb25zdCB7IHByb3RvY29sLCBob3N0IH0gPSBnZXRTdGF0ZSgpLnNvdXJjZVJlcXVlc3RcbiAgICBkaXNwYXRjaCh7IHR5cGU6IExPQURfUE9TVF9SRVFVRVNUIH0pXG4gICAgcmV0dXJuIGF4aW9zLmdldChgJHtwcm90b2NvbH06Ly8ke2hvc3R9L2FwaS92MC9wb3N0cy8ke3NsdWd9YClcbiAgICAgIC50aGVuKHJlcyA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiBMT0FEX1BPU1RfU1VDQ0VTUyxcbiAgICAgICAgICBwYXlsb2FkOiByZXMuZGF0YSxcbiAgICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgICBsYXN0RmV0Y2hlZDogRGF0ZS5ub3coKVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBpbiByZWR1Y2VyIHRoYXQgaGFuZGxlcyAke0xPQURfUE9TVF9TVUNDRVNTfTogYCwgZXJyb3IpXG4gICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiBMT0FEX1BPU1RfRkFJTFVSRSxcbiAgICAgICAgICBwYXlsb2FkOiBlcnJvcixcbiAgICAgICAgICBlcnJvcjogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vY29tbW9uL3JvdXRlcy9Qb3N0L2FjdGlvbnMuanMiXSwic291cmNlUm9vdCI6IiJ9