require("source-map-support").install(),exports.ids=[2],exports.modules={19:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LOAD_POSTS_REQUEST="LOAD_POSTS_REQUEST",t.LOAD_POSTS_SUCCESS="LOAD_POSTS_SUCCESS",t.LOAD_POSTS_FAILURE="LOAD_POSTS_FAILURE",t.LOAD_POST_REQUEST="LOAD_POST_REQUEST",t.LOAD_POST_SUCCESS="LOAD_POST_SUCCESS",t.LOAD_POST_FAILURE="LOAD_POST_FAILURE"},34:function(e,t,r){"use strict";function o(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t.default=e,t}function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:l,t=arguments[1];switch(t.type){case s.LOAD_POSTS_REQUEST:return a({},e,{isLoading:!0,error:null});case s.LOAD_POSTS_SUCCESS:return a({},e,{data:t.payload,lastFetched:t.meta.lastFetched,isLoading:!1});case s.LOAD_POSTS_FAILURE:return a({},e,{error:t.payload});default:return e}}Object.defineProperty(t,"__esModule",{value:!0}),t.selectPosts=void 0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var o in r)Object.prototype.hasOwnProperty.call(r,o)&&(e[o]=r[o])}return e};t.default=n;var i=r(19),s=o(i),l={data:[],lastFetched:null,isLoading:!1,error:null};t.selectPosts=function(e){return e.posts}},62:function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){var e="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;return function(t,r,o,n){var a=t&&t.defaultProps,i=arguments.length-3;if(r||0===i||(r={}),r&&a)for(var s in a)void 0===r[s]&&(r[s]=a[s]);else r||(r=a||{});if(1===i)r.children=n;else if(i>1){for(var l=Array(i),u=0;u<i;u++)l[u]=arguments[u+3];r.children=l}return{$$typeof:e,type:t,key:void 0===o?null:""+o,ref:null,props:r,_owner:null}}}(),a=r(58),i=r(7),s=(o(i),r(108)),l=r(57),u=r(109),c=o(u),d=r(13),S=r(18),f=o(S),_=r(34),p={fetch:function(e){var t=e.dispatch;return t((0,s.loadPosts)())}},O=function(e){return{posts:(0,_.selectPosts)(e)}},v=n(f.default,{title:"Posts"}),y=function(e){var t=e.posts;return n("div",{className:(0,d.css)(P.root)},void 0,v,t.isLoading&&n("div",{},void 0,n("h2",{className:(0,d.css)(P.title)},void 0,"Loading....")),!t.isLoading&&t.data.map(function(e,t){return n(c.default,{post:e},e.id)}))};y.PropTypes={posts:i.PropTypes.array.isRequired};var P=d.StyleSheet.create({root:{maxWidth:500},title:{fontSize:28,margin:"0 auto 1.5rem",color:"#b7b7b7"}});t.default=(0,a.provideHooks)(p)((0,l.connect)(O)(y))},108:function(e,t,r){"use strict";function o(){return function(e,t,r){var o=r.axios,a=t().sourceRequest,i=a.protocol,s=a.host;return e({type:n.LOAD_POSTS_REQUEST}),o.get(i+"://"+s+"/api/v0/posts").then(function(t){e({type:n.LOAD_POSTS_SUCCESS,payload:t.data,meta:{lastFetched:Date.now()}})}).catch(function(t){console.error("Error in reducer that handles "+n.LOAD_POSTS_SUCCESS+": ",t),e({type:n.LOAD_POSTS_FAILURE,payload:t,error:!0})})}}Object.defineProperty(t,"__esModule",{value:!0}),t.loadPosts=o;var n=r(19)},109:function(e,t,r){"use strict";function o(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var n=function(){var e="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;return function(t,r,o,n){var a=t&&t.defaultProps,i=arguments.length-3;if(r||0===i||(r={}),r&&a)for(var s in a)void 0===r[s]&&(r[s]=a[s]);else r||(r=a||{});if(1===i)r.children=n;else if(i>1){for(var l=Array(i),u=0;u<i;u++)l[u]=arguments[u+3];r.children=l}return{$$typeof:e,type:t,key:void 0===o?null:""+o,ref:null,props:r,_owner:null}}}(),a=r(7),i=(o(a),r(95)),s=r(13),l=function(e){var t=e.post;return n("div",{className:(0,s.css)(u.root)},void 0,n("h3",{},void 0,n(i.Link,{to:"/post/"+t.slug,className:(0,s.css)(u.title)},void 0," ",t.title," ")))},u=s.StyleSheet.create({root:{margin:"0 auto 1.5rem"},title:{fontSize:28,textDecoration:"none",lineHeight:"1.2",margin:"0 0 1.5rem",color:"#000",transition:".3s opacity ease",":hover":{opacity:.5}}});t.default=l}};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,